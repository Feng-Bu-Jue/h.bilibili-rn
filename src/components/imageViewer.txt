import * as React from 'react';

import {
  Animated,
  I18nManager,
  Image,
  TouchableHighlight,
  View,
  ViewStyle,
  TextStyle,
} from 'react-native';
import { observer } from 'mobx-react';
import {
  observable,
  runInAction,
  reaction,
  IReactionDisposer,
  toJS,
} from 'mobx';
import { ImageViewerProps, IImageSize, IImageInfo } from 'components';
import ImageZoom from './imageZoom.txt';
import Popup from './popup';
import Loading from './loading';
import merge from 'lodash.merge';

const imageViewerDefaultProps = {
  visible: false,
  index: 0,
  imageUrls: [],
  flipThreshold: 80,
  maxOverflow: 300,
  failImageSource: undefined,
  backgroundColor: colors.Black,
  footerContainerStyle: {},
  style: {},
  enableSwipeDown: false,
  enablePreload: true,
  pageAnimateTime: 100,
  renderImage: (props: any) => {
    return React.createElement(Image, props);
  },
};

@observer
export default class ImageViewer extends React.Component<ImageViewerProps> {
  public static defaultProps = imageViewerDefaultProps;

  @observable
  private currentShowIndex: number = 0;

  @observable
  private imageSizes: IImageSize[] = [];

  private reactionDisposers: Array<IReactionDisposer> = [];

  // 当前基准位置
  private standardPositionX = 0;

  // 整体位移，用来切换图片用
  private positionXNumber = 0;
  private positionX = new Animated.Value(0);

  private width = 0;
  private height = 0;

  private styles = styles(0, 0, 'transparent');

  // 是否执行过 layout. fix 安卓不断触发 onLayout 的 bug
  private hasLayout = false;

  // 记录已加载的图片 index
  private loadedIndex = new Map<number, boolean>();
  private handleLongPressWithIndex = new Map<number, any>();
  private imageRefs: any[] = [];

  constructor(props: ImageViewerProps) {
    super(props);
    this.reactionDisposers.push(
      reaction(
        () => this.props,
        ({ visible }) => {
          if (visible) {
            let newImagesizes: IImageSize[] = [];
            this.props.imageUrls.slice().forEach((imageUrl) => {
              newImagesizes.push({
                width: imageUrl.width || 0,
                height: imageUrl.height || 0,
                status: 'loading',
              });
            });
            this.imageSizes = newImagesizes;
            this.loadedIndex = new Map<number, boolean>();
            this.currentShowIndex = this.props.index || 0;
            this.loadImage(this.currentShowIndex);
            this.jumpToCurrentImage();
          }
        },
        { fireImmediately: true },
      ),
    );
  }

  componentWillUnmount() {
    if (this.reactionDisposers && this.reactionDisposers.length) {
      this.reactionDisposers.forEach((disposer) => {
        disposer();
      });
    }
  }

  /**
   * reset Image scale and position
   */
  public resetImageByIndex = (index: number) => {
    this.imageRefs[index] && this.imageRefs[index].reset();
  };

  /**
   * 调到当前看图位置
   */
  public jumpToCurrentImage() {
    // 跳到当前图的位置
    this.positionXNumber =
      this.width * (this.currentShowIndex || 0) * (I18nManager.isRTL ? 1 : -1);
    this.standardPositionX = this.positionXNumber;
    this.positionX.setValue(this.positionXNumber);
  }

  /**
   * 加载图片，主要是获取图片长与宽
   */
  public loadImage(index: number) {
    if (!this.imageSizes.slice()[index]) {
      return;
    }

    if (this.loadedIndex.has(index)) {
      return;
    }
    this.loadedIndex.set(index, true);

    const image = this.props.imageUrls[index];
    const imageStatus = { ...this.imageSizes[index] };
    // 保存 imageSize
    const saveImageSize = () => {
      // 如果已经 success 了，就不做处理
      if (
        this.imageSizes[index] &&
        this.imageSizes[index].status !== 'loading'
      ) {
        return;
      }

      runInAction(() => {
        this.imageSizes[index] = imageStatus;
      });
    };

    if (this.imageSizes[index].status === 'success') {
      // 已经加载过就不会加载了
      return;
    }

    // 如果已经有宽高了，直接设置为 success
    if (this.imageSizes[index].width > 0 && this.imageSizes[index].height > 0) {
      imageStatus.status = 'success';
      saveImageSize();
      return;
    }
    // 是否加载完毕了图片
    let imageLoaded = false;

    // Tagged success if url is started with file:, or not set yet(for custom source.uri).
    if (!image.url || image.url.startsWith('file:')) {
      imageLoaded = true;
    }

    // 如果已知源图片宽高，直接设置为 success
    if (image.width && image.height) {
      if (this.props.enablePreload && imageLoaded === false) {
        // Image.prefetch(image.url);
      }
      imageStatus.width = image.width;
      imageStatus.height = image.height;
      imageStatus.status = 'success';
      saveImageSize();
      return;
    }
    Image.getSize(
      image.url,
      (width: number, height: number) => {
        imageStatus.width = width;
        imageStatus.height = height;
        imageStatus.status = 'success';
        saveImageSize();
      },
      () => {
        try {
          const source = image.props?.source
            ? image.props?.source
            : { uri: image.url };
          const data = (Image as any).resolveAssetSource(source);
          imageStatus.width = data.width;
          imageStatus.height = data.height;
          imageStatus.status = 'success';
          saveImageSize();
        } catch (newError) {
          // Give up..
          imageStatus.status = 'fail';
          saveImageSize();
        }
      },
    );
  }

  /**
   * 预加载图片
   */
  public preloadImage = (index: number) => {
    if (index < this.imageSizes.length) {
      this.loadImage(index + 1);
    }
  };
  /**
   * 触发溢出水平滚动
   */
  protected handleHorizontalOuterRangeOffset = (offsetX: number = 0) => {
    this.positionXNumber = this.standardPositionX + offsetX;
    this.positionX.setValue(this.positionXNumber);

    const offsetXRTL = I18nManager.isRTL ? -offsetX : offsetX;
    if (offsetXRTL < 0) {
      if (this.currentShowIndex || this.props.imageUrls.length - 1 > 0) {
        this.loadImage((this.currentShowIndex || 0) + 1);
      }
    } else if (offsetXRTL > 0) {
      if (this.currentShowIndex) {
        this.loadImage((this.currentShowIndex || 0) - 1);
      }
    }
  };

  /**
   * 手势结束，但是没有取消浏览大图
   */
  protected handleResponderRelease = (vx: number = 0) => {
    const vxRTL = I18nManager.isRTL ? -vx : vx;
    const isLeftMove = I18nManager.isRTL
      ? this.positionXNumber - this.standardPositionX <
        -(this.props.flipThreshold || 0)
      : this.positionXNumber - this.standardPositionX >
        (this.props.flipThreshold || 0);
    const isRightMove = I18nManager.isRTL
      ? this.positionXNumber - this.standardPositionX >
        (this.props.flipThreshold || 0)
      : this.positionXNumber - this.standardPositionX <
        -(this.props.flipThreshold || 0);

    if (vxRTL > 0.7) {
      // 上一张
      this.goBack();

      // 这里可能没有触发溢出滚动，为了防止图片不被加载，调用加载图片
      if (this.currentShowIndex) {
        this.loadImage((this.currentShowIndex || 0) - 1);
      }
      return;
    } else if (vxRTL < -0.7) {
      // 下一张
      this.goNext();
      if (this.currentShowIndex || this.props.imageUrls.length - 1 > 0) {
        this.loadImage((this.currentShowIndex || 0) + 1);
      }
      return;
    }

    if (isLeftMove) {
      // 上一张
      this.goBack();
    } else if (isRightMove) {
      // 下一张
      this.goNext();
      return;
    } else {
      // 回到之前的位置
      this.resetPosition();
      return;
    }
  };

  /**
   * 到上一张
   */
  public goBack = () => {
    if (this.currentShowIndex === 0) {
      // 回到之前的位置
      this.resetPosition();
      return;
    }

    this.positionXNumber = I18nManager.isRTL
      ? this.standardPositionX - this.width
      : this.standardPositionX + this.width;
    this.standardPositionX = this.positionXNumber;
    Animated.timing(this.positionX, {
      toValue: this.positionXNumber,
      duration: this.props.pageAnimateTime,
      useNativeDriver: true,
    }).start();

    const nextIndex = (this.currentShowIndex || 0) - 1;
    runInAction(() => {
      this.currentShowIndex = nextIndex;
      if (this.props.onChange) {
        this.props.onChange(this.currentShowIndex);
      }
    });
  };

  /**
   * 到下一张
   */
  public goNext = () => {
    if (this.currentShowIndex === this.props.imageUrls.length - 1) {
      // 回到之前的位置
      this.resetPosition();
      return;
    }

    this.positionXNumber = I18nManager.isRTL
      ? this.standardPositionX + this.width
      : this.standardPositionX - this.width;
    this.standardPositionX = this.positionXNumber;
    Animated.timing(this.positionX, {
      toValue: this.positionXNumber,
      duration: this.props.pageAnimateTime,
      useNativeDriver: true,
    }).start();

    const nextIndex = (this.currentShowIndex || 0) + 1;
    runInAction(() => {
      this.currentShowIndex = nextIndex;
      if (this.props.onChange) {
        this.props.onChange(this.currentShowIndex);
      }
    });
  };

  /**
   * 回到原位
   */
  public resetPosition = () => {
    this.positionXNumber = this.standardPositionX;
    Animated.timing(this.positionX, {
      toValue: this.standardPositionX,
      duration: 150,
      useNativeDriver: true,
    }).start();
  };

  /**
   * 长按
   */
  protected handleLongPress = (image: IImageInfo) => {
    if (this.props.onLongPress) {
      this.props.onLongPress(image);
    }
  };

  /**
   * 单击
   */
  protected handleClick = () => {
    if (this.props.onClick) {
      this.props.onClick(this.handleCancel, this.currentShowIndex);
    }
  };

  /**
   * 双击
   */
  protected handleDoubleClick = () => {
    if (this.props.onDoubleClick) {
      this.props.onDoubleClick(this.handleCancel);
    }
  };

  protected handleSwipeDown = () => {
    if (this.props.onSwipeDown) {
      this.props.onSwipeDown();
    }
  };

  /**
   * 退出
   */
  protected handleCancel = () => {
    this.hasLayout = false;
    if (this.props.onCancel) {
      this.props.onCancel();
    }
  };

  /**
   * 完成布局
   */
  protected handleLayout = (event: any) => {
    if (event.nativeEvent.layout.width !== this.width) {
      this.hasLayout = true;
      this.width = event.nativeEvent.layout.width;
      this.height = event.nativeEvent.layout.height;
      this.styles = styles(
        this.width,
        this.height,
        this.props.backgroundColor || colors.Transparent,
      );
      // 强制刷新
      this.forceUpdate();
      this.jumpToCurrentImage();
    }
  };

  public getContent(fadeAnim: Animated.Value) {
    // 获得屏幕宽高
    const screenWidth = this.width;
    const screenHeight = this.height;

    const ImageElements = this.props.imageUrls.map((image, index) => {
      if (
        (this.currentShowIndex || 0) > index + 1 ||
        (this.currentShowIndex || 0) < index - 1
      ) {
        return (
          <View
            key={index}
            style={{ width: screenWidth, height: screenHeight }}
          />
        );
      }

      if (!this.handleLongPressWithIndex.has(index)) {
        this.handleLongPressWithIndex.set(
          index,
          this.handleLongPress.bind(this, image),
        );
      }

      let width = this.imageSizes[index] && this.imageSizes[index].width;
      let height = this.imageSizes[index] && this.imageSizes[index].height;
      const imageInfo = this.imageSizes[index];

      if (!imageInfo || !imageInfo.status) {
        return (
          <View
            key={index}
            style={{ width: screenWidth, height: screenHeight }}
          />
        );
      }

      // 如果宽大于屏幕宽度,整体缩放到宽度是屏幕宽度
      if (width > screenWidth) {
        const widthPixel = screenWidth / width;
        width *= widthPixel;
        height *= widthPixel;
      }

      // 如果此时高度还大于屏幕高度,整体缩放到高度是屏幕高度
      if (height > screenHeight) {
        const HeightPixel = screenHeight / height;
        width *= HeightPixel;
        height *= HeightPixel;
      }

      const Wrapper = ({ children, ...others }: any) => (
        <ImageZoom
          cropWidth={this.width}
          cropHeight={this.height}
          maxOverflow={this.props.maxOverflow}
          horizontalOuterRangeOffset={this.handleHorizontalOuterRangeOffset}
          responderRelease={this.handleResponderRelease}
          onMove={this.props.onMove}
          onLongPress={this.handleLongPressWithIndex.get(index)}
          onClick={this.handleClick}
          onDoubleClick={this.handleDoubleClick}
          enableSwipeDown={this.props.enableSwipeDown}
          swipeDownThreshold={this.props.swipeDownThreshold}
          onSwipeDown={this.handleSwipeDown}
          pinchToZoom={this.props.enableImageZoom}
          enableDoubleClickZoom={this.props.enableImageZoom}
          doubleClickInterval={this.props.doubleClickInterval}
          {...others}>
          {children}
        </ImageZoom>
      );
      switch (imageInfo.status) {
        case 'loading':
          return (
            <Wrapper
              key={index}
              style={{
                ...this.styles.modalContainer,
                ...this.styles.loadingContainer,
              }}
              imageWidth={screenWidth}
              imageHeight={screenHeight}>
              <View style={this.styles.loadingContainer}>
                {this.props.loadingRender ? (
                  this.props.loadingRender()
                ) : (
                  <Loading
                    style={{ backgroundColor: colors.Transparent }}
                    loading
                    color={colors.White}
                  />
                )}
              </View>
            </Wrapper>
          );
        case 'success':
          const mergeSource: any = {
            style: {
              ...this.styles.imageStyle,
              width,
              height,
            },
          };
          if (typeof image.props?.source === 'number') {
            // source = require(..), doing nothing
          } else {
            mergeSource.source = {
              uri: image.url,
            };
          }
          const imageProps = merge({}, toJS(image.props), mergeSource);
          return (
            <ImageZoom
              key={index}
              ref={(el: any) => (this.imageRefs[index] = el)}
              cropWidth={this.width}
              cropHeight={this.height}
              maxOverflow={this.props.maxOverflow}
              horizontalOuterRangeOffset={this.handleHorizontalOuterRangeOffset}
              responderRelease={this.handleResponderRelease}
              onMove={this.props.onMove}
              onLongPress={this.handleLongPressWithIndex.get(index)}
              onClick={this.handleClick}
              onDoubleClick={this.handleDoubleClick}
              imageWidth={width}
              imageHeight={height}
              enableSwipeDown={this.props.enableSwipeDown}
              swipeDownThreshold={this.props.swipeDownThreshold}
              onSwipeDown={this.handleSwipeDown}
              panToMove
              pinchToZoom={this.props.enableImageZoom}
              enableDoubleClickZoom={this.props.enableImageZoom}
              doubleClickInterval={this.props.doubleClickInterval}
              minScale={this.props.minScale}
              maxScale={this.props.maxScale}>
              {this.props.renderImage && this.props.renderImage(imageProps)}
            </ImageZoom>
          );
        case 'fail':
          return (
            <Wrapper
              key={index}
              style={this.styles.modalContainer}
              imageWidth={
                this.props.failImageSource
                  ? this.props.failImageSource.width
                  : screenWidth
              }
              imageHeight={
                this.props.failImageSource
                  ? this.props.failImageSource.height
                  : screenHeight
              }>
              {this.props.failImageSource &&
                this.props.renderImage &&
                this.props.renderImage({
                  source: {
                    uri: this.props.failImageSource.url,
                  },
                  style: {
                    width: this.props.failImageSource.width,
                    height: this.props.failImageSource.height,
                  },
                })}
            </Wrapper>
          );
      }
    });

    return (
      <Animated.View
        style={{
          ...this.styles.container,
          opacity: fadeAnim,
          zIndex: sizes.zIndexN,
        }}>
        <TouchableHighlight
          underlayColor={colors.Black50}
          onPress={this.handleCancel}
          style={[this.styles.coloseIconBox]}>
          <Iconclose size={18} color={colors.White} />
        </TouchableHighlight>
        <Animated.View
          style={{
            ...this.styles.moveBox,
            transform: [{ translateX: this.positionX }],
            width: this.width * this.props.imageUrls.length,
          }}>
          {ImageElements}
        </Animated.View>
        <View
          style={[
            // eslint-disable-next-line react-native/no-inline-styles
            { bottom: 0, position: 'absolute', zIndex: sizes.zIndexN },
            this.props.footerContainerStyle,
          ]}>
          {this.props.renderFooter?.call(null, this.currentShowIndex || 0)}
        </View>
      </Animated.View>
    );
  }

  render() {
    return (
      <Popup
        containerStyle={{ backgroundColor: colors.Transparent }}
        position="center"
        animation={false}
        entityId={this.props.entityId}
        visible={this.props.visible}
        onPressMask={this.handleCancel}>
        {(insets, animationValue) => (
          <Animated.View
            onLayout={this.handleLayout}
            // eslint-disable-next-line react-native/no-inline-styles
            style={{
              opacity: animationValue,
              height: '100%',
              overflow: 'hidden',
              paddingTop: insets?.top,
              paddingBottom: insets?.bottom,
              backgroundColor: this.props.backgroundColor,
              ...this.props.style,
            }}>
            {this.props.visible ? this.getContent(animationValue) : <></>}
          </Animated.View>
        )}
      </Popup>
    );
  }
}

const styles = function (
  width: number,
  height: number,
  backgroundColor: string,
): {
  [x: string]: ViewStyle | TextStyle;
} {
  return {
    modalContainer: {
      backgroundColor,
      justifyContent: 'center',
      alignItems: 'center',
      overflow: 'hidden',
    },
    imageStyle: {},
    container: { backgroundColor }, // 多图浏览需要调整整体位置的盒子
    moveBox: { flexDirection: 'row', alignItems: 'center' },
    operateContainer: {
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'white',
      height: 40,
      borderBottomColor: '#ccc',
      borderBottomWidth: 1,
    },
    operateText: { color: '#333' },
    loadingTouchable: { width, height },
    loadingContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
    },
    coloseIconBox: {
      position: 'absolute',
      zIndex: 11,
      width: 50,
      height: 50,
      justifyContent: 'center',
      alignItems: 'center',
    },
  };
};
